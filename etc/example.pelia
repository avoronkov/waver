# Set tempo
% tempo 120


# Kick drum
# `< 320` sends signals before 320 bit
# `: 8` stands for "every 8 bits"
# `->` sends message on the right hand when condition on the left hand is true
# `"zk21" is a kick ('k') sample ('z') from second ('2') samples set with volume '1'
% sample kick "2/kick"
< 320 : 8 -> { kick _ 1 }


# Hi-hat
# `> 16` sends signals after 16th bit
# `: [ 2 1 ]` sends signals on each 1st and 2nd bits of 3 (`**.`)
% sample hat "2/hat"
> 16 < 128 : [ 2 1 ] -> { hat _ 1 }


# Snare drum
# `+ 4` shifts bits count by 4
% sample snare "2/snare"
> 32 < 256 : 8 + 4 -> { snare _ 2 }


# Variable `ch1` contains C minor chord (4th octave)
ch1 = [ C4 Eb4 G4 ]


# Variable `ch2` contains E flat major chord.
# (Same as `ch2 = [ Eb4 G4 Bb4 ]`.)
# Available functions: maj min, maj7, min7, maj9, min9
ch2 = maj Eb4


# Chords
# `seq` describes iterator which returns specified elements in a loop.
chords = seq [ ch1 ch2 ]


# `{ Inst None Vol Dur }`:
# - `Inst` - number of instrument (see "Instruments" section)
# - `Note` - note or chord to play
# - `Vol` - volume (1..16)
# - `Dur` - duration
% inst sine 'sine'
> 64 < 354 : 32 -> { sine chords 1 32 }


# Bass
bassline = seq [ C2 G2 Eb2 Bb1 ]

# `_dur` is a special variable containing duration of current note
# set by operator `:`.
% inst bass 'triangle'
> 96 < 354 : 16 -> { bass bassline 2 _dur }


# Melody
# `rand` chooses random item from the list
%% inst string 'sine'
- adsr:
- delay:
    interval: 1.0
    fade: 0.5
    times: 2
%%

melody = rand [ C4 Eb4 F4 G4 Bb4 C5 Eb5 ]
> 128 < 256 : [ 6 ] -> { string melody 3 1 }
